from logic import *

AKinght=Symbol("A is a Knight")
AKnave=Symbol("A is a Knave")

BKinght=Symbol("B is a Knight")
BKnave=Symbol("B is a Knave")

CKinght=Symbol("C is a Knight")
CKnave=Symbol("C is a Knave")

knowledge0=And(
Or(AKnight,AKnave),
Not(And(AKnight,AKnave)),
Biconditional(AKinght(And(AKnight,AKnave)),
)

knowledge1 = And(
    Or(AKnight, AKnave),
    Not(And(AKnight, AKnave)),
    Or(BKnight, BKnave),

    Not(And(BKnight, BKnave)),

    Biconditional(AKnight, And(AKnave, BKnave))
)


knowledge2=And(
Or(AKnight, AKnave),
    Not(And(AKnight, AKnave)),
    Or(BKnight, BKnave),

    Not(And(BKnight, BKnave)),

Implication(AKnight,Or(And(AKnight,BKnight), And(AKnave,BKnave))),
Implication(AKnight,Not(Or(And(AKnight,BKnight), And(AKnave,BKnave)))),

Implication(AKnight,Or(And(BKnight,BKnight), And(BKnave,AKnave))),
Implication(AKnight,Not(Or(And(BKnight,BKnight), And(BKnave,AKnave)))),

)

Knowledge3=And(
Or(AKnight,AKnave),
Not(And((AKnight,AKnave),
Not(And(BKnight,BKnave)),

Or(CKnight, CKnave),
    Not(And(BKnight, BKnave)),
     Or(CKnight, CKnave),
     Not(And(CKnight, CKnave)),

Implication(AKnight,Or(AKnight,AKnave)),
Implication(AKnave,Not(Or(AKnight,AKnave))),

Biconditional(BKnight,Biconditional(AKnight,AKnave)),

Biconditional(BKnight,CKnave),

Biconditional(CKnight,AKnave),
)

def main():
         symbols=[AKnight,AKnave,BKnight,BKnave,CKnight,CKnave]
          puzzles=[
                ("Puzzle 0",knowledge0),
                ("Puzzle 1", knowledge1),
               ("Puzzle 2", knowledge2),
                ("Puzzle 3", knowledge3)
            ]


        for puzzel.knowledge in puzzles:
                 print(puzzle)
                if len(knowledge.conjuncts)==0:
                     print("   Not yet implemented."
       else:
           for symbol in symbols:
                if model_check(knowledge,symbol):
                     print(f"   {symbol}")
if__name__=="__main__":
       main()


                     








